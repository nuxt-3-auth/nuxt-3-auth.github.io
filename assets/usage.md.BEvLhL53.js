import{_ as e,c as t,o as s,a4 as a}from"./chunks/framework.CfbOou38.js";const u=JSON.parse('{"title":"Usage","description":"","frontmatter":{},"headers":[],"relativePath":"usage.md","filePath":"usage.md"}'),i={name:"usage.md"},n=a(`<h1 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h1><h2 id="authentication-on-pages" tabindex="-1">Authentication on pages <a class="header-anchor" href="#authentication-on-pages" aria-label="Permalink to &quot;Authentication on pages&quot;">​</a></h2><p>To require authentication for any page, you simply need to declare the <code>auth</code> page meta for that page using the <code>definePageMeta</code> function:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // pages/admin.vue</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  definePageMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ auth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>So, when accessing the <code>/admin</code> page, if not logged in, you will be redirected to the <code>/login</code> page. After successfully logging in, you will be redirected back to the <code>/admin</code> page.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>See more about the <code>auth</code> meta at <a href="/guide/middleware.html#middleware">Middleware</a>.</p><p>Find more guidance on login in the <a href="/guide/login.html">Guide &gt; Login</a> section and logout in the <a href="/guide/logout.html">Guide &gt; Logout</a> section.</p></div><h2 id="authentication-on-api-calls" tabindex="-1">Authentication on API calls <a class="header-anchor" href="#authentication-on-api-calls" aria-label="Permalink to &quot;Authentication on API calls&quot;">​</a></h2><p>Once logged in successfully, the module will automatically attach the access token to the header of every API request (if the token exists), so you don&#39;t need to perform any additional actions.</p><p>In some cases, you may want to call an API without attaching the access token to the header. In this case, you can pass the <code>auth: false</code> option when making the API call as follows:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;GET&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  auth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>The <code>auth</code> option accepts the following values:</p><table tabindex="0"><thead><tr><th>Value</th><th>Description</th><th>Automatically attach Access token in headers</th><th>Automatically refresh token</th></tr></thead><tbody><tr><td><code>true</code></td><td>Used for API requests requiring <strong>mandatory authentication</strong>.<br>The access token (if any) will be attached to the request header. If the request returns a <code>401 Unauthorized</code> error, the module will automatically refresh the token and retry the request once. If still unauthorized after the second attempt, the module will automatically redirect to the <code>/login</code> page.</td><td><div style="text-align:center;">✅</div></td><td><div style="text-align:center;">✅</div></td></tr><tr><td><code>false</code></td><td>Used for API requests <strong>not requiring authentication</strong>.<br><strong>Even if an access token exists, it will not be attached to the request header</strong>. Therefore, if the request returns a <code>401 Unauthorized</code> error, the module <strong>will not refresh the token</strong> but immediately redirect to the <code>/login</code> page.</td><td><div style="text-align:center;">❌</div></td><td><div style="text-align:center;">❌</div></td></tr><tr><td><code>&#39;optional&#39;</code></td><td>Used for API requests <strong>with or without</strong> authentication requirements.<br>The access token (if any) will be attached to the request header. However, if the request returns a <code>401 Unauthorized</code> error, the module <strong>will not refresh the token</strong> but immediately redirect to the <code>/login</code> page.</td><td><div style="text-align:center;">✅</div></td><td><div style="text-align:center;">❌</div></td></tr></tbody></table><h2 id="interception-and-refresh-token" tabindex="-1">Interception and refresh token <a class="header-anchor" href="#interception-and-refresh-token" aria-label="Permalink to &quot;Interception and refresh token&quot;">​</a></h2><p>By default, the module will automatically refresh the token when making API calls and receiving a <code>401 Unauthorized</code> response.</p><p>In case you want to actively refresh the access token, you can call the <code>refreshTokens</code> function of <code>$auth</code> as follows:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$auth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useNuxtApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $auth.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">refreshTokens</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // handle error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Note that in case the refresh token fails, the <code>refreshTokens</code> function will call <code>logout(false)</code> and return an error object, which you need to catch.</p>`,17),h=[n];function o(l,d,r,c,p,k){return s(),t("div",null,h)}const E=e(i,[["render",o]]);export{u as __pageData,E as default};
